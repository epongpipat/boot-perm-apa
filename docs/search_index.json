[
["index.html", "APA Statement using Resampling Techniques for GLM using R This book is a reference on how to perform resampling techniques (e.g., bootstrapping and permutation testing) to write a more informed APA statement. Chapter 1 Introduction 1.1 APA Statement (Bare Minimum) 1.2 More Informative APA Statement", " APA Statement using Resampling Techniques for GLM using R This book is a reference on how to perform resampling techniques (e.g., bootstrapping and permutation testing) to write a more informed APA statement. Ekarin E. Pongpipat, Phillip F. Agres, Paulina Skolasinska, Yuefeng Huang, Jane Lung 2019-11-17 Chapter 1 Introduction Note: This bookdown was creating during Brainhack-Dallas as a project to work with bookdown, review bootstrapping and permutation testing, and write out this APA statement. 1.1 APA Statement (Bare Minimum) Currently, the APA statement includes: Estimate Name of Statistic Degrees of Freedom (df) Statistical Value p-value 1.2 More Informative APA Statement However, sometimes we want more information such as effect sizes or confidence intervals. Thus, we should also consider including the following: Estimate and its Confidence Interval (CI) Name of Statistic Degrees of Freedom (df) Statistical Value Mean Squared Error (MSE) Adjusted R^2 and its CI Permutated P-Value "],
["bootstrap.html", "Chapter 2 Bootstrap 2.1 Simple Linear Regression", " Chapter 2 Bootstrap library(tidyverse) ## ── Attaching packages ──────── ## ✔ ggplot2 3.2.1 ✔ purrr 0.3.2 ## ✔ tibble 2.1.3 ✔ dplyr 0.8.3 ## ✔ tidyr 0.8.3 ✔ stringr 1.4.0 ## ✔ readr 1.3.1 ✔ forcats 0.4.0 ## ── Conflicts ───────────────── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() library(broom) library(eepR) ## Warning: replacing previous import &#39;dplyr::group_rows&#39; by ## &#39;kableExtra::group_rows&#39; when loading &#39;eepR&#39; ## Warning: replacing previous import &#39;foreach::when&#39; by &#39;purrr::when&#39; when ## loading &#39;eepR&#39; ## Warning: replacing previous import &#39;foreach::accumulate&#39; by ## &#39;purrr::accumulate&#39; when loading &#39;eepR&#39; df &lt;- carData::Salaries 2.1 Simple Linear Regression 2.1.1 Run Original Model model &lt;- lm(salary ~ yrs.since.phd + yrs.service, df) tidy &lt;- tidy(model) tidy ## # A tibble: 3 x 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 89912. 2844. 31.6 3.81e-110 ## 2 yrs.since.phd 1563. 257. 6.09 2.75e- 9 ## 3 yrs.service -629. 254. -2.47 1.38e- 2 2.1.2 Bootstrap # set number of bootstraps n_bootstrap &lt;- 1000 # create empty dataframes for coefficients and r-squared bootstrap_coef &lt;- tibble(n_iter = NA, .rows = n_bootstrap) bootstrap_rsq &lt;- tibble(n_iter = NA, .rows = n_bootstrap) # for loop for bootstrap for (i in 1:n_bootstrap) { # randomly sample with replacement from the rows idx &lt;- sample(1:nrow(df), nrow(df), replace = T) df_boot &lt;- df[idx,] # run linear model model_boot &lt;- lm(salary ~ yrs.since.phd + yrs.service, df_boot) # obtain clean coefficients table tidy_boot &lt;- tidy(model_boot) # extract estimates and r^2 value summary_model &lt;- summary(model_boot) t_stat &lt;- tidy_boot$statistic df_denom &lt;- summary_model$df[[2]] r_sq &lt;- t_stat^2 / (t_stat^2 + df_denom) # write bootstrap iteration bootstrap_coef[i, 1] &lt;- i bootstrap_rsq[i, 1] &lt;- i # determine number of coefficients n_coef &lt;- nrow(tidy_boot) # write estimate and r^2 to table for looping across variables for (j in 1:n_coef) { # bootstrap estimate confidence interval bootstrap_coef[i, tidy_boot$term[j]] &lt;- tidy_boot$estimate[j] # bootstrap R^2 CI bootstrap_rsq[i, tidy_boot$term[j]] &lt;- r_sq[j] } } # print estimate CI and R^2 CI for each variable for (k in 1:n_coef) { # obtain 95% estimate ci bootstrap_ci &lt;- quantile(as.matrix(bootstrap_coef[,(k+1)]), probs = c(0.025, .975)) # obtain 95% r^2 ci bootstrap_rsq_ci &lt;- quantile(as.matrix(bootstrap_rsq[,(k+1)]), probs = c(0.025, .975)) # add to tidy table tidy[k, &quot;estimate_95_ci_ll&quot;] &lt;- bootstrap_ci[1] tidy[k, &quot;estimate_95_ci_ul&quot;] &lt;- bootstrap_ci[2] tidy[k, &quot;rsq_95_ci_ll&quot;] &lt;- bootstrap_rsq_ci[1] tidy[k, &quot;rsq_95_ci_ul&quot;] &lt;- bootstrap_rsq_ci[2] } tidy %&gt;% nice_table_html() term estimate std.error statistic p.value estimate_95_ci_ll estimate_95_ci_ul rsq_95_ci_ll rsq_95_ci_ul (Intercept) 89912.1845 2843.5599 31.619586 0.0000000 85095.316 94897.47876 0.6813993 0.7543248 yrs.since.phd 1562.8889 256.8196 6.085551 0.0000000 1014.798 2082.53845 0.0328743 0.1540771 yrs.service -629.1014 254.4694 -2.472208 0.0138496 -1196.224 -16.81245 0.0001348 0.0584176 2.1.3 Bootstrap Estimate bootstrap_coef %&gt;% gather(., &quot;term&quot;, &quot;coef&quot;, -n_iter) %&gt;% ggplot(., aes(coef)) + geom_histogram() + facet_wrap(~ term, scales = &quot;free_x&quot;) + theme_minimal() + theme(axis.text.x = element_text(hjust = 1, angle = 45)) + labs(x = &quot;estimate&quot;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 2.1.4 Bootstrap \\(R^2\\) bootstrap_rsq %&gt;% gather(., &quot;term&quot;, &quot;coef&quot;, -n_iter) %&gt;% ggplot(., aes(coef)) + geom_histogram() + facet_wrap(~ term, scales = &quot;free_x&quot;) + theme_minimal() + theme(axis.text.x = element_text(hjust = 1, angle = 45)) + labs(x = &quot;r-squared&quot;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. "],
["permutation.html", "Chapter 3 Permutation", " Chapter 3 Permutation library(tidyverse) library(gridExtra) ## ## Attaching package: &#39;gridExtra&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## combine df &lt;- carData::Salaries #take a look at what predictors we have for this dataset names(df) ## [1] &quot;rank&quot; &quot;discipline&quot; &quot;yrs.since.phd&quot; &quot;yrs.service&quot; ## [5] &quot;sex&quot; &quot;salary&quot; #run linear model model_est &lt;- lm(salary ~ yrs.since.phd + yrs.service, df) #extract coefficient for independent est_cof &lt;- summary(model_est)$coefficients[,&#39;Estimate&#39;] est_cof ## (Intercept) yrs.since.phd yrs.service ## 89912.1845 1562.8889 -629.1014 #number of permutation n_permutation &lt;- 5000 #empty dataframe to store coefficient permutation_coef &lt;- tibble(n_iter = NA, .rows = n_permutation) #for loop for permutation for (i in 1:n_permutation) { #randomly sample without replacement for salary idx_salary &lt;- sample(1:nrow(df), nrow(df), replace = F) salary &lt;- df$salary[idx_salary] #randomly sample without replacement for years since phd idx_yrs.since.phd &lt;- sample(1:nrow(df), nrow(df), replace = F) yrs.since.phd &lt;- df$yrs.since.phd[idx_yrs.since.phd] #randomly sample without replacement for years service idx_yrs.service &lt;- sample(1:nrow(df), nrow(df), replace = F) yrs.service &lt;- df$yrs.service[idx_yrs.service] #run linear model after every iteration model_permu &lt;- lm(salary~yrs.since.phd+yrs.service) #extract coefficients permu_cof &lt;- summary(model_permu)$coefficients[,&#39;Estimate&#39;] permutation_coef[i,1] &lt;- i #save the coefficients in a dataframe with a for loop for (j in 1:length(permu_cof)) { permutation_coef[i,names(permu_cof)[j]] &lt;- permu_cof[j] } } #create an empty dataframe to stroe comparisons between permutation statistic and estimate statistic N &lt;- tibble(n_iter=NA,.rows = n_permutation) column_names &lt;- c(&quot;intercept&quot;,&quot;yrs.since.phd&quot;,&quot;yrs.service&quot;) N[,column_names] &lt;- NA #run a for loop to do comparison and store the logistic values (two-tailed) for (i in 1:n_permutation) { N[i,1] &lt;- i N[i,2] &lt;- abs(permutation_coef[i,2]) &gt;= abs(est_cof[1]) N[i,3] &lt;- abs(permutation_coef[i,3]) &gt;= abs(est_cof[2]) N[i,4] &lt;- abs(permutation_coef[i,4]) &gt;= abs(est_cof[3]) } #compute the p_value p_permu_intercept &lt;- mean(N$intercept) p_permu_yrs.since.phd &lt;- mean(N$yrs.since.phd) p_permu_yrs.service &lt;- mean(N$yrs.service) #plot the figures g1 &lt;- ggplot(permutation_coef,aes(x=`(Intercept)`))+ geom_histogram()+ geom_vline(xintercept = est_cof[1]) g2 &lt;- ggplot(permutation_coef,aes(x=yrs.since.phd))+ geom_histogram()+ geom_vline(xintercept = est_cof[2]) g3 &lt;- ggplot(permutation_coef,aes(x=yrs.service))+ geom_histogram()+ geom_vline(xintercept = est_cof[3]) grid.arrange(g1,g2,g3) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. "],
["apa-statement.html", "Chapter 4 APA Statement", " Chapter 4 APA Statement From the previous information, we could write a more informative APA statement. "],
["assumptions.html", "Chapter 5 Assumptions", " Chapter 5 Assumptions "],
["multiple-comparison-correction.html", "Chapter 6 Multiple Comparison Correction", " Chapter 6 Multiple Comparison Correction "],
["references.html", "References", " References "]
]
